from aiogram import F, Router, Bot 
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter

from aiogram.fsm.context import FSMContext
import app.validators as valid
import app.keyboards as kb
import app.database.requests as rq

from datetime import datetime, timedelta
import app.utils.states as st
import app.utils.filters as fl
import app.utils.help_func as util
import logging
from app.utils.help_func import clean_user_input

router = Router()

# region —ç–∫—Å–ø–æ—Ä—Ç
@router.message(fl.RoleFilter("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ú–∞—Å—Ç–µ—Ä_–∞–¥–º–∏–Ω"), Command('export'))
async def cmd_export(message: Message, state: FSMContext):
       await state.clear()
       await message.answer("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.exportchoice)
       await state.set_state(st.ExportOrder.choise)

@router.callback_query(st.ExportOrder.choise, F.data.startswith("export:"))
async def exp_type_choise(callback: CallbackQuery, state: FSMContext):
       exp_type = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(expType = exp_type)
       if (exp_type == "diograms"):
              await callback.message.answer("–ö–∞–∫—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å?", reply_markup=kb.diogramChoise)
       else:
              await callback.message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb.exp_orders_kb)

@router.callback_query(st.ExportOrder.choise, F.data.startswith("diogram:"))
async def exp_diogram(callback: CallbackQuery, state: FSMContext):
       diogramType = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(diogramType = diogramType)
       await callback.message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb.exp_orders_kb)

@router.message(st.ExportOrder.choise, F.text.lower().in_(["–¥–µ–Ω—å ‚òÄÔ∏è", "–Ω–µ–¥–µ–ª—è üìÖ", "–º–µ—Å—è—Ü üåô", "–≥–æ–¥ üóìÔ∏è", "—Å–≤–æ–π ‚úèÔ∏è"]))
async def status_order_catalog(message: Message, state:FSMContext):
       per = message.text.lower()
       match per:
              case "–¥–µ–Ω—å ‚òÄÔ∏è":
                     date_from = datetime.now().replace(hour=0, minute=0, second=0)
              case "–Ω–µ–¥–µ–ª—è üìÖ":
                     date_from = datetime.now() - timedelta(days=7)
              case "–º–µ—Å—è—Ü üåô":
                     date_from = datetime.now() - timedelta(days=30)
              case "–≥–æ–¥ üóìÔ∏è":
                     date_from = datetime.now() - timedelta(days=365)
              case "—Å–≤–æ–π ‚úèÔ∏è":
                     await state.set_state(st.ExportOrder.period_set)
                     await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
                     return
              case _:
                     await message.answer("–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                     return
       
       await make_export(message, state, date_from)
       

@router.message(st.ExportOrder.period_set)
async def status_order_catalog(message: Message, state:FSMContext):
       if valid.valid_exp_period (message.text):
              date_from, date_to = message.text.split('-')
              await state.set_state(st.ExportOrder.start)
              await make_export(message, state, date_from, date_to)
       else:
              await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑")

async def make_export(message: Message, state:FSMContext, date_from, date_to = None):
       data = await state.get_data()
       if type(date_from) != datetime:
              date_from = datetime.strptime(date_from, '%d.%m.%Y')

       if date_to != None:
              date_to = datetime.strptime(date_to, '%d.%m.%Y')
       else:
             date_to = datetime.today()
       try:
              if data["expType"] == "orders":
                     file = await rq.export_orders_to_excel(date_from=date_from, date_to=date_to)
                     await message.answer_document(file, caption="–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤", reply_markup=ReplyKeyboardRemove())
              if data["expType"] == "diograms":
                     diograms = await rq.export_diagrama(diogramType = data["diogramType"], date_from=date_from, date_to=date_to)
                     for diogram in diograms:           
                            await message.answer_photo(diogram, reply_markup=ReplyKeyboardRemove())
       except Exception as e:
              if str(e) == "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥":             
                     await message.answer(f"–í –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
              else:
                     await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

#endregion

@router.callback_query(
       StateFilter(st.ChangRatio.choose_type,
                     st.ChangRatio.select_cargo_type,
                     st.ChangRatio.select_time,
                     st.ChangRatio.select_weight),
       F.data.startswith("ratio_type:")
)
async def select_ratio_type(callback: CallbackQuery, state: FSMContext):
       _, ratio_type = callback.data.split(":")
       await callback.answer()

       await state.update_data(ratio_type=ratio_type)

       match ratio_type:
              case "cargo":
                     items = await rq.get_cargo_type_list()
                     mst = st.ChangRatio.select_cargo_type
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:"
                     kb_markup = kb.generic_coeff_keyboard(items, "cargo")
              case "time":
                     items = await rq.get_time_coeffs()
                     mst = st.ChangRatio.select_time
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:"
                     kb_markup = kb.generic_coeff_keyboard(items, "time")
              case "weight":
                     items = await rq.get_weight_coeffs()
                     mst = st.ChangRatio.select_weight
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞:"
                     kb_markup = kb.generic_coeff_keyboard(items, "weight")

       await util.push_scene(
              state,
              message_id=callback.message.message_id,
              text=mes,
              keyboard=kb_markup,
              state_name=mst.state
       )

       await state.set_state(mst)
       await callback.message.edit_text(mes, reply_markup=kb_markup)


@router.callback_query(
       StateFilter(st.ChangRatio.select_cargo_type,
                     st.ChangRatio.select_time,
                     st.ChangRatio.select_weight),
       F.data.startswith("change_coeff:")
)
async def change_any_ratio(callback: CallbackQuery, state: FSMContext):
       _, prefix, item_id = callback.data.split(":")
       await callback.answer()

       await state.update_data(coeff_id=item_id, coeff_type=prefix)
       await state.set_state(st.ChangRatio.set_generic_ratio)

       await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:")


@router.callback_query(
       StateFilter(st.ChangRatio.select_cargo_type,
                     st.ChangRatio.select_time,
                     st.ChangRatio.select_weight),
       F.data.startswith("add_coeff:")
)
async def add_any_ratio(callback: CallbackQuery, state: FSMContext):
       _, prefix = callback.data.split(":")
       await callback.answer()

       await state.update_data(coeff_type=prefix)
       await state.set_state(st.ChangRatio.set_group_ratio)

       match prefix:
              case "cargo":
                     text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –≥—Ä—É–∑–∞ (—Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞):"
              case "time":
                     text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
              case "weight":
                     text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"

       await callback.message.edit_text(text)



@router.message(st.ChangRatio.set_group_ratio)
async def set_new_generic_ratio(message: Message, state: FSMContext):
       data = await state.get_data()
       coeff_type = data['coeff_type']
       user_input = message.text.strip()

       match coeff_type:
              case "cargo":
                     if not user_input.isalpha():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —á–∏—Å–µ–ª.")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=user_input)
                     await message.answer(f"–ì—Ä—É–∑–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ '{user_input}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
              
              case "time":
                     if not user_input.isdigit():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã).")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=int(user_input))
                     await message.answer(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç '{user_input} –º–∏–Ω' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
              
              case "weight":
                     if not user_input.isdigit():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–≤ –∫–≥).")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=int(user_input))
                     await message.answer(f"–í–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç '{user_input} –∫–≥' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
       
       await state.clear()

@router.message(st.ChangRatio.set_generic_ratio)
async def set_new_generic_ratio(message: Message, state: FSMContext):
       try:
              value = float(message.text)
              data = await state.get_data()
              coeff_type = data['coeff_type']
              coeff_id = int(data['coeff_id'])

              match coeff_type:
                     case "cargo":
                            await rq.update_ratio(coeff_id, value)
                     case "time":
                            await rq.update_time_coeff(coeff_id, value)
                     case "weight":
                            await rq.update_weight_coeff(coeff_id, value)

              await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
              await state.clear()
       except ValueError:
              await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
       except Exception as e:
              await message.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


@router.message(fl.RoleFilter("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ú–∞—Å—Ç–µ—Ä_–∞–¥–º–∏–Ω"), Command("admin_panel"))
async def admin_panel(message: Message, state: FSMContext):
       mes = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
       mkb = kb.admin_panel_kb
       mst = st.AdminPanel.menu

       sent = await message.answer(text=mes, reply_markup=mkb)
       await util.push_scene(
              state,
              message_id=sent.message_id,
              text=mes,
              keyboard=mkb,
              state_name=mst.state
       )

       await state.set_state(mst)

@router.callback_query(st.AdminPanel.menu, F.data.startswith("ap_choise"))
async def ap__categori(callback: CallbackQuery, state: FSMContext):
       categori = callback.data.split(":")[1]

       match categori:
              case "staff":
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
                     mkb = await kb.ap_staff_cat_keyboard(callback.from_user.id)
                     mst = st.AdminPanel.stuffCat
              case "departments":
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥–µ–ª–∞"
                     mkb = kb.ap_dep_keyboard
                     mst = st.AdminPanel.buildCat
              case "coefficients":
                     mes = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"
                     mkb = kb.ratio_type_keyboard()
                     mst = st.ChangRatio.choose_type

       await util.push_scene(
              state,
              message_id=callback.message.message_id,
              text=mes,
              keyboard=mkb,
              state_name=mst.state
       )

       await state.set_state(mst)
       await callback.answer()
       await callback.message.edit_text(text=mes, reply_markup=mkb)


@router.callback_query(st.AdminPanel.stuffCat, F.data.startswith("ap_staff_role"))
async def ap_staff(callback: CallbackQuery, state: FSMContext):
       categori = callback.data.split(":")[1]

       match categori:
              case "couriers":
                     mes = "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:\n" + await rq.get_stuff_List_mes(roleId=2)
                     mst = st.AP_Staff.disp
              case "dispatchers":
                     mes = "–°–ø–∏—Å–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤" + await rq.get_stuff_List_mes(roleId=1)
                     mst = st.AP_Staff.disp
              case "admins":
                     mes = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤" + await rq.get_stuff_List_mes(roleId=3)
                     mst = st.AP_Staff.disp

       mkb = kb.go_back_kb

       await util.push_scene(
              state,
              message_id=callback.message.message_id,
              text=mes,
              keyboard=mkb,
              state_name=mst.state
       )

       await state.set_state(mst)
       await callback.answer()
       await callback.message.edit_text(text=mes, reply_markup=mkb)

@router.callback_query(st.AdminPanel.buildCat, F.data.startswith('dep_type_choise'))
async def dep_choise(callbacke: CallbackQuery, state: FSMContext):
       dep_type = callbacke.data.split(':')[1]
       await callbacke.answer()
       await state.update_data(dep_type=dep_type)
       mes = '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'
       mkb = kb.dep_chose(int(dep_type), is_ap = True)
       mst = st.AdminPanel.buildCat

       await util.push_scene(
              state,
              message_id=callbacke.message.message_id,
              text=mes,
              keyboard=mkb,
              state_name=mst.state
       )

       await callbacke.message.edit_text(mes, reply_markup= mkb)

@router.callback_query(st.AdminPanel.buildCat, F.data.startswith('depart'))
async def build_choise(callbacke: CallbackQuery, state: FSMContext):
       dep_id = callbacke.data.split(':')[1]
       mes = '–ö–æ—Ä–ø—É—Å–∞'
       mkb = kb.build_chose(int(dep_id), is_ap = True)
       mst = st.AdminPanel.buildCat

       await util.push_scene(
              state,
              message_id=callbacke.message.message_id,
              text=mes,
              keyboard=mkb,
              state_name=mst.state
       )

       await callbacke.answer()
       await callbacke.message.edit_text(mes,reply_markup= mkb)

# region –ü–æ–¥–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith('cmd_admin_reg'))
async def actionWithRegRquest (callbacke: CallbackQuery, bot: Bot):
       _, action, tgId, role = callbacke.data.split(':')
       match action:
              case 'accept':
                     await rq.add_role_and_acess(tgId=tgId,role=role)
                     mes = f'–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –≤–∞—à–∞ —Ä–æ–ª—å {role}'
                     await util.set_user_commands(bot, tgId)
              case 'cancel':
                     mes = f'–î–æ—Å—Ç—É–ø –≤ —Å–∏—Å—Ç–µ–º—É –≤–æ—Å–ø—Ä–µ—â–µ–Ω'
       await callbacke.answer()
       await callbacke.bot.edit_message_text(
            text="–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–∞: —É—Å–ø–µ—à–Ω–æ",
            chat_id=callbacke.message.chat.id,
            message_id=callbacke.message.message_id)
       await bot.send_message(tgId, text=mes)

@router.message(Command("drivers_salary"))
async def drivers_payment (message: Message, state: FSMContext):
       await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
       await state.set_state(st.DriverSalyre.set_period)


@router.message(st.DriverSalyre.set_period)
async def salary_period(message: Message, state:FSMContext):
       if valid.valid_exp_period (message.text):
              date_from, date_to = message.text.split('-')
              await state.set_state(st.DriverSalyre.start)
              mes = await rq.get_drivers_payment(last_month_12=date_from, current_month_12=date_to)
              await message.answer(mes)
       else:
              await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑")

# endregion

@router.message(Command('add_building'))
async def start_add_building(message: Message, state: FSMContext):
    try:
        kb_markup = kb.dep_keyboard
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', reply_markup=kb_markup)
        await state.set_state(st.AddBuilding.choose_department_type)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_add_building: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞.')

@router.callback_query(st.AddBuilding.choose_department_type, F.data.startswith('dep_type_choise:'))
async def add_building_choose_department_type(callback: CallbackQuery, state: FSMContext):
    try:
        dep_type_id = int(callback.data.split(':')[1])
        kb_markup = kb.dep_chose(dep_type_id, is_ap = True)
        await callback.answer()
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', reply_markup=kb_markup)
        await state.set_state(st.AddBuilding.choose_department)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_choose_department_type: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.', show_alert=True)

@router.callback_query(st.AddBuilding.choose_department, F.data.startswith('depart:'))
async def add_building_choose_department(callback: CallbackQuery, state: FSMContext):
    try:
        dep_id = int(callback.data.split(':')[1])
        await state.update_data(department_id=dep_id)
        await callback.answer()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞:')
        await state.set_state(st.AddBuilding.input_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_choose_department: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–¥–µ–ª–∞.', show_alert=True)

@router.message(st.AddBuilding.input_name)
async def add_building_input_name(message: Message, state: FSMContext):
    try:
        await state.update_data(building_name=clean_user_input(message.text.strip()))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):')
        await state.set_state(st.AddBuilding.input_description)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_input_name: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞.')

@router.message(st.AddBuilding.input_description)
async def add_building_input_description(message: Message, state: FSMContext):
    try:
        desc = clean_user_input(message.text.strip())
        await state.update_data(description=desc)
        data = await state.get_data()
        dep_id = data['department_id']
        name = data['building_name']
        description = data['description']
        confirm_text = f'–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–ø—É—Å "{name}"\n–û—Ç–¥–µ–ª ID: {dep_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description or "-"}?'
        kb_markup = kb.confirm_kb()
        await message.answer(confirm_text, reply_markup=kb_markup)
        await state.set_state(st.AddBuilding.confirm)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_input_description: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è.')

@router.callback_query(st.AddBuilding.confirm, F.data == 'confirm')
async def add_building_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        build_id = await rq.add_building(name=data['building_name'])
        await rq.add_department_building(department_id=data['department_id'], building_id=build_id, description=data['description'])
        await rq.dep_build_set()
        await callback.answer('–ö–æ—Ä–ø—É—Å –¥–æ–±–∞–≤–ª–µ–Ω!')
        await callback.message.edit_text('–ö–æ—Ä–ø—É—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_confirm: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–ø—É—Å–∞.', show_alert=True)
        await callback.message.edit_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–ø—É—Å–∞.')
        await state.clear()

@router.callback_query(st.AddBuilding.confirm, F.data == 'cancel')
async def add_building_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('–û—Ç–º–µ–Ω–∞')
        await callback.message.edit_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_building_cancel: {e}")

@router.message(Command('add_department'))
async def start_add_department(message: Message, state: FSMContext):
    try:
        kb_markup = kb.dep_keyboard
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞:', reply_markup=kb_markup)
        await state.set_state(st.AddDepartment.choose_type)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_add_department: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞.')

@router.callback_query(st.AddDepartment.choose_type, F.data.startswith('dep_type_choise:'))
async def add_department_choose_type(callback: CallbackQuery, state: FSMContext):
    try:
        dep_type_id = int(callback.data.split(':')[1])
        await state.update_data(dep_type_id=dep_type_id)
        await callback.answer()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:')
        await state.set_state(st.AddDepartment.input_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_choose_type: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.', show_alert=True)

@router.message(st.AddDepartment.input_name)
async def add_department_input_name(message: Message, state: FSMContext):
    try:
        await state.update_data(department_name=message.text.strip())
        kb_markup = kb.build_chose_all(is_ap = True)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –¥–ª—è –æ—Ç–¥–µ–ª–∞:', reply_markup=kb_markup)
        await state.set_state(st.AddDepartment.choose_building)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_input_name: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞.')

@router.callback_query(st.AddDepartment.choose_building, F.data.startswith('depart_build:'))
async def add_department_choose_building(callback: CallbackQuery, state: FSMContext):
    try:
        build_id = int(callback.data.split(':')[1])
        await state.update_data(building_id=build_id)
        await callback.answer()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):')
        await state.set_state(st.AddDepartment.input_description)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_choose_building: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—Ä–ø—É—Å–∞.', show_alert=True)

@router.message(st.AddDepartment.input_description)
async def add_department_input_description(message: Message, state: FSMContext):
    try:
        desc = message.text.strip()
        await state.update_data(description=desc)
        data = await state.get_data()
        dep_type_id = data['dep_type_id']
        name = data['department_name']
        build_id = data['building_id']
        description = data['description']
        confirm_text = f'–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª "{name}"\n–¢–∏–ø: {"–¶–µ—Ö" if dep_type_id==1 else "–û—Ç–¥–µ–ª"}\n–ö–æ—Ä–ø—É—Å ID: {build_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description or "-"}?'
        kb_markup = kb.confirm_kb()
        await message.answer(confirm_text, reply_markup=kb_markup)
        await state.set_state(st.AddDepartment.confirm)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_input_description: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è.')

@router.callback_query(st.AddDepartment.confirm, F.data == 'confirm')
async def add_department_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        dep_id = await rq.add_department(name=data['department_name'], type_id=data['dep_type_id'])
        await rq.add_department_building(department_id=dep_id, building_id=data['building_id'], description=data['description'])
        await rq.dep_build_set()
        await callback.answer('–û—Ç–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω!')
        await callback.message.edit_text('–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_confirm: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞.', show_alert=True)
        await callback.message.edit_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞.')
        await state.clear()

@router.callback_query(st.AddDepartment.confirm, F.data == 'cancel')
async def add_department_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('–û—Ç–º–µ–Ω–∞')
        await callback.message.edit_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_department_cancel: {e}")

@router.message(Command('add_dep_and_build'))
async def start_add_dep_and_build(message: Message, state: FSMContext):
    try:
        kb_markup = kb.dep_keyboard
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞:', reply_markup=kb_markup)
        await state.set_state(st.AddDepartmentAndBuilding.choose_type)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_add_dep_and_build: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –∏ –∫–æ—Ä–ø—É—Å–∞.')

@router.callback_query(st.AddDepartmentAndBuilding.choose_type, F.data.startswith('dep_type_choise:'))
async def dep_and_build_choose_type(callback: CallbackQuery, state: FSMContext):
    try:
        dep_type_id = int(callback.data.split(':')[1])
        await state.update_data(dep_type_id=dep_type_id)
        await callback.answer()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:')
        await state.set_state(st.AddDepartmentAndBuilding.input_department_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_choose_type: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.', show_alert=True)

@router.message(st.AddDepartmentAndBuilding.input_department_name)
async def dep_and_build_input_department_name(message: Message, state: FSMContext):
    try:
        await state.update_data(department_name=message.text.strip())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞:')
        await state.set_state(st.AddDepartmentAndBuilding.input_building_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_input_department_name: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞.')

@router.message(st.AddDepartmentAndBuilding.input_building_name)
async def dep_and_build_input_building_name(message: Message, state: FSMContext):
    try:
        await state.update_data(building_name=message.text.strip())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):')
        await state.set_state(st.AddDepartmentAndBuilding.input_description)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_input_building_name: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞.')

@router.message(st.AddDepartmentAndBuilding.input_description)
async def dep_and_build_input_description(message: Message, state: FSMContext):
    try:
        desc = message.text.strip()
        await state.update_data(description=desc)
        data = await state.get_data()
        dep_type_id = data['dep_type_id']
        dep_name = data['department_name']
        build_name = data['building_name']
        description = data['description']
        confirm_text = f'–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª "{dep_name}"\n–¢–∏–ø: {"–¶–µ—Ö" if dep_type_id==1 else "–û—Ç–¥–µ–ª"}\n–ö–æ—Ä–ø—É—Å: {build_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description or "-"}?'
        kb_markup = kb.confirm_kb()
        await message.answer(confirm_text, reply_markup=kb_markup)
        await state.set_state(st.AddDepartmentAndBuilding.confirm)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_input_description: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è.')

@router.callback_query(st.AddDepartmentAndBuilding.confirm, F.data == 'confirm')
async def dep_and_build_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await rq.add_department_and_building(
            department_name=data['department_name'],
            department_type_id=data['dep_type_id'],
            building_name=data['building_name'],
            description=data['description']
        )
        await rq.dep_build_set()
        await callback.answer('–û—Ç–¥–µ–ª –∏ –∫–æ—Ä–ø—É—Å –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
        await callback.message.edit_text('–û—Ç–¥–µ–ª –∏ –∫–æ—Ä–ø—É—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_confirm: {e}")
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.', show_alert=True)
        await callback.message.edit_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ –∏ –∫–æ—Ä–ø—É—Å–∞.')
        await state.clear()

@router.callback_query(st.AddDepartmentAndBuilding.confirm, F.data == 'cancel')
async def dep_and_build_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer('–û—Ç–º–µ–Ω–∞')
        await callback.message.edit_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ dep_and_build_cancel: {e}")

"""
@router. ()
async def (message: Message, calback: CallbackQuery, state: FSMContext):
       mes = ""
       mkb = kb
       mst = st
       await state.update_data(message_id=message.message_id,
                                   text=mes,
                                   keyboard=mkb,
                                   state=mst.state)
"""
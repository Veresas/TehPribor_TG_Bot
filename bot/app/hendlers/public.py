from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ContentType
from aiogram.filters import CommandStart, Command, StateFilter

from aiogram.fsm.context import FSMContext
import app.validators as valid
import app.keyboards as kb
import app.database.requests as rq

from datetime import datetime, timedelta

import logging
import app.utils.states as st
import app.utils.help_func as util
from app.utils.help_func import clean_user_input

router = Router()
publicRouter = Router()

@publicRouter.message(CommandStart())
async def cmd_start(message:Message):
       if await rq.check_user(tg_id=message.from_user.id):
              await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏!')
       else:
              await message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /register')

@router.message(Command('reload_comand'))
async def reload_comand(message: Message, bot: Bot):
    try:
        await util.set_user_commands(bot, message.from_user.id)
        await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
        await message.answer('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

# region —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@publicRouter.message(Command('register'))
async def register(message: Message, state:FSMContext):

       await state.clear()
       if await rq.check_user(tg_id=message.from_user.id):
               await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
       else:
              await state.set_state(st.Register.fio)
              await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')

@publicRouter.message(st.Register.fio)
async def register_name (message: Message, state: FSMContext):
       if valid.valid_fio(message.text):
              await state.update_data(fio=clean_user_input(message.text))
              await state.set_state (st.Register.number)
              await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)
       else:
              await message.answer('–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è 2 –∏–ª–∏ 3 —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

@publicRouter.message(st.Register.number, F.contact)
async def register_number(message: Message, state: FSMContext):
       await state.update_data(number=message.contact.phone_number)
       await state.set_state(st.Register.role)
       await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å', reply_markup = kb.roles)
       

@publicRouter.callback_query(StateFilter(st.Register.role, st.ChangeRole.start), F.data.startswith('role_') )
async def register_role(calback: CallbackQuery, state: FSMContext):
       calbackRole = calback.data.split('_')[1]
       match calbackRole:
              case 'disp':
                     calbackRole = '–î–∏—Å–ø–µ—Ç—á–µ—Ä'
              case 'driver':
                     calbackRole = '–í–æ–¥–∏—Ç–µ–ª—å'
              case 'admin':
                     calbackRole = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
       await state.update_data(role = calbackRole)
       data = await state.get_data()
       await state.set_state(st.Register.final)
       await calback.answer()
       await calback.message.answer(f'–í–∞—à–µ –∏–º—è: {data["fio"]}\n–í–∞—à –Ω–æ–º–µ—Ä: {data["number"]}\n–í–∞—à–∞ —Ä–æ–ª—å: {data["role"]}', reply_markup=kb.regKey)

@publicRouter.callback_query(st.Register.final, F.data == 'cmd_register_accept')
async def new_register_accept(callback: CallbackQuery, state: FSMContext, bot: Bot):
       data = await state.get_data()
       await callback.answer()
       await state.clear()
       await callback.answer()
       await rq.reg_user(data=data,tg_id=callback.from_user.id)
       await request_to_admin(callback.from_user.id, bot, data)
       await callback.message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=ReplyKeyboardRemove())

async def request_to_admin(tgId: int, bot: Bot, data):
       adminIds = await rq.get_admins_for_alarm()
       mes = f'–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n –ò–º—è: {data["fio"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–†–æ–ª—å: {data["role"]}'
       for adminId in adminIds:
             await bot.send_message(adminId, text= mes, reply_markup=kb.regAdminAcepts(tgId))

@publicRouter.callback_query(st.Register.final, F.data == 'cmd_register_cancel')
async def new_register_cancel(callback: CallbackQuery, state: FSMContext):
       await state.clear()
       await callback.answer()
       await callback.message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /register')



@publicRouter.message(Command('cancel'), StateFilter('*'))
async def cancelCom(message: Message, state:FSMContext):
       await state.clear()
       await message.answer('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
# endregion

# region –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–æ–≤
@router.message(Command("orders"))
async def order_catalog_choice(message: Message, state:FSMContext):
       await state.clear()

       userRole = await rq.get_user_role(tg_id=message.from_user.id)
       await state.update_data(indexStart = 0, indexEnd = 5, userRole = userRole, tg_id=message.from_user.id, button_text="take_order")  
       if(userRole != "–í–æ–¥–∏—Ç–µ–ª—å"):
              await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Å—Ç–∞—Ç—É—Å —É –∑–∞–∫–∞–∑–∞", reply_markup=kb.choseOrderStatusList)
              await state.set_state(st.Order_list.order_ststus)
       else:
              await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", reply_markup= await kb.order_day(message.from_user.id))
              await state.set_state(st.Order_list.start)

@router.message(st.Order_list.order_ststus, F.text.lower().in_(["–¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ", "–≤ —Ä–∞–±–æ—Ç–µ üîß", "–∑–∞–≤–µ—Ä—à–µ–Ω ‚úîÔ∏è", "–≤—Å–µ üåê"]))
async def status_order_catalog(message: Message, state:FSMContext):
       status = message.text.lower()
       if status == "–¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ":
              await state.update_data(statusId = 1)
       elif status == "–≤ —Ä–∞–±–æ—Ç–µ üîß":
              await state.update_data(statusId = 2)
       elif status == "–∑–∞–≤–µ—Ä—à–µ–Ω ‚úîÔ∏è":
              await state.update_data(statusId = 3)
       
       await state.set_state(st.Order_list.start)
       await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", reply_markup= await kb.order_day(message.from_user.id))


@router.message(st.Order_list.start, F.text.lower().in_(["—Å–µ–≥–æ–¥–Ω—è ‚òÄÔ∏è", "–∑–∞–≤—Ç—Ä–∞ üå§Ô∏è", "–≤—Å–µ üåê"]))
async def order_catalog(message: Message, state:FSMContext):
       data = await state.get_data()
       if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è ‚òÄÔ∏è":
              orderKyes = await rq.get_order_keys(dateTime=datetime.today().date(), tg_id=data["tg_id"], statusId=data.get("statusId", None))
       elif message.text.lower() == "–∑–∞–≤—Ç—Ä–∞ üå§Ô∏è":
              orderKyes = await rq.get_order_keys(dateTime=datetime.today().date() + timedelta(days=1), tg_id=data["tg_id"], statusId=data.get("statusId", None))
       elif data["userRole"] != "–í–æ–¥–∏—Ç–µ–ª—å":
              if message.text.lower() == "–≤—Å–µ üåê" :
                     orderKyes = await rq.get_order_keys(tg_id=data["tg_id"])
              else: 
                     await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")
       else:
              await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")

       if len(orderKyes) != 0: 
              size = len(orderKyes)
              if size < 5:
                     await state.update_data(indexEnd = size)
              await state.update_data(orderList = orderKyes)
              data["orderList"] = orderKyes
              orders = await rq.get_orders(ordersKeys=orderKyes, start=0,end=5)
              mes = "\n".join(orders)
              data = await state.get_data()
              await message.answer(mes, reply_markup= await kb.order_select_keyboard(data=data), parse_mode="HTML")
       else:
              await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")

@router.callback_query(StateFilter(st.Order_list.start, st.Privat_order_list.start), F.data ==('order_move_back'))
async def order_move_back(callback: CallbackQuery, state: FSMContext):
       await callback.answer()
       data = await state.get_data()
       await state.update_data(indexStart = (data["indexStart"]-5), indexEnd = (data["indexEnd"]-5))
       orders = await rq.get_orders(ordersKeys= data["orderList"], start=data["indexStart"]-5, end=data["indexEnd"]-5)
       mes = "\n".join(orders)
       current_state = await state.get_state()
       data["indexStart"] = (data["indexStart"]-5)
       data["indexEnd"] = (data["indexEnd"]-5)
       await callback.message.edit_text(mes, reply_markup= await kb.order_select_keyboard(data=data, isHistoruPraviteCatalog=data.get("isHistoruPraviteCatalog", False)), parse_mode="HTML")

@router.callback_query(StateFilter(st.Order_list.start, st.Privat_order_list.start), F.data == ('order_move_forward'))
async def order_move_forward(callback: CallbackQuery, state: FSMContext):
       await callback.answer()
       data = await state.get_data()
       await state.update_data(indexStart = (data["indexStart"]+5), indexEnd = (data["indexEnd"]+5))
       orders = await rq.get_orders(ordersKeys= data["orderList"], start=data["indexStart"]+5, end=data["indexEnd"]+5)
       mes = "\n".join(orders)
       data["indexStart"] = (data["indexStart"]+5)
       data["indexEnd"] = (data["indexEnd"]+5)
       await callback.message.edit_text(mes, reply_markup= await kb.order_select_keyboard(data=data, isHistoruPraviteCatalog=data.get("isHistoruPraviteCatalog", False) ), parse_mode="HTML")

@router.callback_query(st.Order_list.start, F.data.startswith('take_order:'))
async def order_take(callback: CallbackQuery, state: FSMContext):
       orderId = callback.data.split(':')[1]
       await state.update_data(orderId = orderId)
       await callback.answer()
       await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{orderId}', reply_markup= kb.publicCatalogKey)


@router.callback_query(st.Order_list.start, F.data ==('accept_take_order'))
async def order_take(callback: CallbackQuery, state: FSMContext):
       data = await state.get_data()
       await callback.answer()
       try:
              result = await rq.take_order(tg_id=data["tg_id"], order_id=int(data["orderId"]))
              if result == 'ok':
                     await callback.message.answer(f'–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑: {data["orderId"]}', reply_markup=ReplyKeyboardRemove())
                     chat_id, mes = await rq.get_user_for_send(orderId=int(data["orderId"]), driver_id=data["tg_id"], action_text="–í–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É")
                     await callback.message.bot.send_message(chat_id=chat_id, text=mes, parse_mode="HTML")
                     await state.clear()
              elif result == 'too_many':
                     await callback.message.answer('–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö.')
              else:
                     await callback.message.answer(f'–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç')
       except Exception as e:
              await callback.message.answer(f'–ü—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
# endregion

# region –õ–∏—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
@router.message( Command("my_orders"))
async def private_order_catalog_choice(message: Message, state:FSMContext): 
       await state.clear()  

       userRole = await rq.get_user_role(tg_id=message.from_user.id)
       await state.update_data(indexStart = 0, indexEnd = 5, userRole = userRole, tg_id=message.from_user.id, button_text="complete_order")
       if userRole != "–í–æ–¥–∏—Ç–µ–ª—å":
              await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Å—Ç–∞—Ç—É—Å —É –∑–∞–∫–∞–∑–∞", reply_markup=kb.choseOrderStatusList)
              await state.set_state(st.Privat_order_list.order_ststus)
       else:
              await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤", reply_markup= kb.private_order_list_kb)
              await state.set_state(st.Privat_order_list.start)

@router.message(st.Privat_order_list.order_ststus, F.text.lower().in_(["–¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ", "–≤ —Ä–∞–±–æ—Ç–µ üîß", "–∑–∞–≤–µ—Ä—à–µ–Ω ‚úîÔ∏è", "–≤—Å–µ üåê"]))
async def status_order_catalog(message: Message, state:FSMContext):
       status = message.text.lower()
       if status == "–¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ":
              await state.update_data(statusId = 1)
       elif status == "–≤ —Ä–∞–±–æ—Ç–µ üîß":
              await state.update_data(statusId = 2)
       elif status == "–∑–∞–≤–µ—Ä—à–µ–Ω ‚úîÔ∏è":
              await state.update_data(statusId = 3)
       
       await state.set_state(st.Privat_order_list.start)      
       await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤", reply_markup= kb.private_order_list_kb)

@router.message(st.Privat_order_list.start, F.text.lower().in_(["–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã üöÄ", "–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ üìú"]))
async def private_order_catalog(message: Message, state:FSMContext):
       data = await state.get_data()
       if message.text.lower() == "–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã üöÄ":
              orderKyes = await rq.get_order_keys(tg_id=data["tg_id"], isActual=True, isPrivateCatalog=True, statusId=data.get("statusId", None))
              await state.update_data(isPrivatCatalog = True)
       elif message.text.lower() == "–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ üìú":
              orderKyes = await rq.get_order_keys(tg_id=data["tg_id"], isPrivateCatalog=True, statusId=data.get("statusId", None))
              await state.update_data(isHistoruPraviteCatalog = True)
       elif data["userRole"] != "–í–æ–¥–∏—Ç–µ–ª—å":
              if message.text.lower() == "–≤—Å–µ" :
                     orderKyes = await rq.get_order_keys()
              else: 
                     await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")
       else:
              await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")

       if len(orderKyes) != 0:      
              size = len(orderKyes)
              if size < 5:
                     await state.update_data(indexEnd = size)
              await state.update_data(orderList = orderKyes)
              data["orderList"] = orderKyes
              orders = await rq.get_orders(ordersKeys=orderKyes, start=0,end=5)
              mes = "\n".join(orders)
              data = await state.get_data()
              await message.answer(mes, reply_markup= await kb.order_select_keyboard(data, isHistoruPraviteCatalog=data.get("isHistoruPraviteCatalog", False), isPrivatCatalog=data.get("isPrivatCatalog", False) ), parse_mode="HTML" )
       else:
              await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")

@router.callback_query(st.Privat_order_list.start, F.data.startswith('complete_order:'))
async def complete_take(callback: CallbackQuery, state: FSMContext):
       orderId = callback.data.split(':')[1]
       await state.update_data(orderId = orderId)
       await callback.answer()
       await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{orderId}', reply_markup= kb.privateCatalogKey)

@router.callback_query(st.Privat_order_list.start, F.data == ('accept_complete_order'))
async def acept_complete_take(callback: CallbackQuery, state: FSMContext):
       data = await state.get_data()
       await callback.answer()
       try:
              if await rq.complete_order(tg_id=data["tg_id"], order_id=int(data["orderId"])):
                     await callback.message.answer(f'–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑: {data["orderId"]}', reply_markup=ReplyKeyboardRemove())
                     chat_id, mes = await rq.get_user_for_send(orderId=int(data["orderId"]), driver_id=data["tg_id"], action_text="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", optin_mes="–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫–∞: ")
                     await callback.message.bot.send_message(chat_id=chat_id, text=mes, reply_markup=await kb.rateKey(data["orderId"]), parse_mode="HTML")
                     await state.clear()
              else:
                     await callback.message.answer(f'–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω')
       except Exception as e:
              await callback.message.answer(f'–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@router.callback_query(st.Privat_order_list.start, F.data == ('take_off_complete_order'))
async def take_off_complete_take(callback: CallbackQuery, state: FSMContext):
       data = await state.get_data()
       await callback.answer()
       try:
              await rq.take_off_complete_order(tg_id=data["tg_id"], order_id=int(data["orderId"]))
              await callback.message.answer(f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞: {data["orderId"]}', reply_markup=ReplyKeyboardRemove())
              chat_id, mes = await rq.get_user_for_send(orderId=int(data["orderId"]), driver_id=data["tg_id"], action_text="–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
              await callback.message.bot.send_message(chat_id=chat_id, text=mes, parse_mode="HTML")
              await state.clear()
       except Exception as e:
              await callback.message.answer(f'–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@router.callback_query(st.Privat_order_list.start, F.data == ('wath_photo_complete_order'))
async def wath_photo_complete_take(callback: CallbackQuery, state: FSMContext):
       data = await state.get_data()
       photoId  = await rq.get_order_photo(order_id=data["orderId"])
       await callback.answer()
       if photoId is not None:
              await callback.message.answer_photo(photoId )
       else:
              await callback.message.answer(f'–£ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ')


@router.callback_query(st.Privat_order_list.start, F.data.startswith('cmd_choice_order:'))
async def disp_chois_order_action(callback: CallbackQuery, state: FSMContext):
       orderId = callback.data.split(':')[1]
       await callback.answer()
       await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º {orderId}', reply_markup= await kb.dispPrivetOrdersKey(orderId=orderId))

@router.callback_query(st.Privat_order_list.start, F.data.startswith('cmd_cancel_order:'))
async def cancel_order(callback: CallbackQuery, state: FSMContext):
       orderId = callback.data.split(':')[1]
       await callback.answer()
       data = {
              "order_id": orderId,
              "edit_order_status": 4
       }
       try:
              await rq.edit_order(data=data)
              await callback.message.answer(f'–ó–∞–∫–∞–∑ {orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=ReplyKeyboardRemove())
              await state.clear()
       except Exception as e:
              await callback.message.answer(f"–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–±—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.callback_query(st.Privat_order_list.start, F.data.startswith('cmd_edit_order:'))
async def edit_order(callback: CallbackQuery, state: FSMContext):
       orderId = callback.data.split(':')[1]
       await state.clear()
       await state.set_state(st.EditOrder.select_field)
       order = await rq.get_order(orderId=int(orderId))
       cargo_type = order.orderTypeName
       mes = f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n'
       mes = mes + await rq.form_order(order=order, cargo_type=cargo_type)
       await state.update_data(order_id=orderId, order = order)
       await callback.answer()
       await callback.message.answer(mes, reply_markup= kb.edit_order_keyboard , parse_mode="HTML")
# endregion

@router.message( Command('start_work'))
async def driver_start_work(message: Message):
       await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–µ—Ä–∏ live location.", reply_markup=kb.shearGPS)
                

@router.message(F.content_type == ContentType.LOCATION)
async def handle_location(message: Message):
    user_id = await rq.get_user_id(message.from_user.id)
    loc = message.location

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É –≤ –ë–î
    await rq.save_location(
        user_id=user_id,
        latitude=loc.latitude,
        longitude=loc.longitude,
        timestamp=message.date
    )

@router.edited_message(F.content_type == ContentType.LOCATION)
async def handle_location_edit(message: Message):
       await handle_location(message)

@router.message( Command('map'))
async def get_map(message: Message):

       map_image = await rq.get_map(tg_id=message.from_user.id, date=datetime.today())

       if isinstance(map_image, str):
        # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
              await message.answer(map_image)
       else:
              # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è BufferedInputFile, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
              await message.answer_photo(photo=map_image, caption="–í–∞—à –º–∞—Ä—à—Ä—É—Ç")

@router.message( Command('change_role'))
async def cahnge_role(message: Message, state: FSMContext):
       await state.clear()
       await state.set_state(st.ChangeRole.start)
       await state.update_data(tg_id = message.from_user.id)
       await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å. –î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel', reply_markup = kb.roles)  


@router.message( Command('help'))
async def cmd_help(message: Message):
       user_role = await rq.get_user_role(tg_id=message.from_user.id)
       mes = "–ó–∞–≥–ª—É—à–∫–∞"
       match user_role:
              case "–í–æ–¥–∏—Ç–µ–ª—å":
                     mes = (
                            "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
                            "–†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏:\n"
                            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /orders. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, "
                            "–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Å—Ä–æ–∫—É –≤–∑—è—Ç–∏—è (–æ—Ç —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∫ –ø–æ–∑–¥–Ω–µ–º—É).\n"
                            "–ü–æ–¥ —Å–ø–∏—Å–∫–æ–º –º–æ–≥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–æ 5 –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞.\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.\n\n"
                            "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
                            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_orders.\n"
                            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
                            "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π:\n"
                            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
                     )
              case "–î–∏—Å–ø–µ—Ç—á–µ—Ä":
                     mes = (
                            "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
                            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_order.\n"
                            "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.\n"
                            "–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
                            "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. "
                            "–ó–∞–∫–∞–∑—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ä–æ–∫—É –≤–∑—è—Ç–∏—è (–æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –∫ –ø–æ–∑–¥–Ω–µ–º—É). –ú–æ–∂–Ω–æ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å—Ç—Ä–µ–ª–∫–∞–º–∏.\n\n"
                            "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_orders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
                            "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π:\n"
                            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.\n\n"
                            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ–π–¥–∏—Ç–µ –≤ /my_orders -> –¥–æ—Å—Ç—É–ø–µ–Ω -> —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å." 
                            "–ü–æ—è–≤–∏—Ç—Å—è –æ–ø–∏—Å–∞–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."
                            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª"
                            "–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É"
                     )
              case "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                     mes = (
                            "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
                            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_order.\n"
                            "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.\n"
                            "–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
                            "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. "
                            "–ó–∞–∫–∞–∑—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ä–æ–∫—É –≤–∑—è—Ç–∏—è (–æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –∫ –ø–æ–∑–¥–Ω–µ–º—É). –ú–æ–∂–Ω–æ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å—Ç—Ä–µ–ª–∫–∞–º–∏.\n\n"
                            "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_orders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
                            "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π:\n"
                            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.\n\n"
                            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:\n"
                            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ–π–¥–∏—Ç–µ –≤ /my_orders -> –¥–æ—Å—Ç—É–ø–µ–Ω -> —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å." 
                            "–ü–æ—è–≤–∏—Ç—Å—è –æ–ø–∏—Å–∞–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."
                            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª"
                            "–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É\n\n"
                            "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel:\n"
                            "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –≤ —Ñ–∞–π–ª Excel –Ω—É–∂–Ω–æ: –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /export –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
                            "–ö–∞–∂–¥–∞—è –∏–∑ –∫–æ–º–∞–Ω–¥ (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≥–æ–¥) –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–Ω—è –º–∏–Ω—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π."
                            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /admin_panel \n"
                            "–ü–∞–Ω–µ–ª—Ç –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –æ—Ç–¥–µ–æ–≤/–∫–æ—Ä–ø—É—Å–æ–≤ –∏ –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç–æ–≤."
                     )

       await message.answer(mes)

@router.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
       last = await util.pop_scene(state)

       if not last:
              await callback.answer("üîô –ù–∞–∑–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
              return

       await callback.message.edit_text(
              text=last["text"],
              reply_markup=last["keyboard"]
       )

       await callback.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥")


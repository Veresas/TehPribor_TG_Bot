from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command

from aiogram.fsm.context import FSMContext
import app.validators as valid
import app.keyboards as kb
import app.database.requests as rq

from datetime import datetime, timedelta
import app.utils.states as st

router = Router()

# region —ç–∫—Å–ø–æ—Ä—Ç
@router.message(Command('export'))
async def cmd_export(message: Message, state: FSMContext):
       await state.clear()
       role = await rq.get_user_role(tg_id=message.from_user.id)
       if (role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
              await message.answer("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.exportchoice)
              await state.set_state(st.ExportOrder.choise)
       else:
              await message.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@router.callback_query(st.ExportOrder.choise, F.data.startswith("export:"))
async def exp_type_choise(callback: CallbackQuery, state: FSMContext):
       exp_type = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(expType = exp_type)
       await callback.message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb.exp_orders_kb)

@router.message(st.ExportOrder.choise, F.text.lower().in_(["–¥–µ–Ω—å ‚òÄÔ∏è", "–Ω–µ–¥–µ–ª—è üìÖ", "–º–µ—Å—è—Ü üåô", "–≥–æ–¥ üóìÔ∏è", "—Å–≤–æ–π"]))
async def status_order_catalog(message: Message, state:FSMContext):
       per = message.text.lower()
       match per:
              case "–¥–µ–Ω—å ‚òÄÔ∏è":
                     date_from = datetime.now().replace(hour=0, minute=0, second=0)
              case "–Ω–µ–¥–µ–ª—è üìÖ":
                     date_from = datetime.now() - timedelta(days=7)
              case "–º–µ—Å—è—Ü üåô":
                     date_from = datetime.now() - timedelta(days=30)
              case "–≥–æ–¥ üóìÔ∏è":
                     date_from = datetime.now() - timedelta(days=365)
              case "—Å–≤–æ–π ‚úèÔ∏è":
                     await state.set_state(st.ExportOrder.period_set)
                     await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
                     return
              case _:
                     await message.answer("–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                     return
       
       await make_export(message, state, date_from)
       

@router.message(st.ExportOrder.period_set)
async def status_order_catalog(message: Message, state:FSMContext):
       if valid.valid_exp_period (message.text):
              date_from, date_to = message.text.split('-')
              await state.set_state(st.ExportOrder.start)
              await make_export(message, state, date_from, date_to)
       else:
              await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑")


async def make_export(message: Message, state:FSMContext, date_from, date_to = None):
       data = await state.get_data()
       if type(date_from) != datetime:
              date_from = datetime.strptime(date_from, '%d.%m.%Y')

       if date_to != None:
              date_to = datetime.strptime(date_to, '%d.%m.%Y')
       else:
             date_to = datetime.today()
       try:
              if data["expType"] == "orders":
                     file = await rq.export_orders_to_excel(date_from=date_from, date_to=date_to)
                     await message.answer_document(file, caption="–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤", reply_markup=ReplyKeyboardRemove())
              if data["expType"] == "drivers":
                     diogram = await rq.export_diagrama(date_from=date_from, date_to=date_to)
                     await message.answer_photo(diogram, caption="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π", reply_markup=ReplyKeyboardRemove())
       except Exception as e:
              if str(e) == "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥":             
                     await message.answer(f"–í –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
              else:
                     await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
#endregion

@router.message(Command('cargo_ratios'))
async def show_ratio(message: Message, state: FSMContext):
       role = await rq.get_user_role(tg_id=message.from_user.id)
       if (role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
              count, mes = await rq.get_cargo_type_output()
              await state.set_state(st.ChangRatio.start)
              await message.answer(mes, reply_markup=kb.ratio_keyboard(count))
       else:
              await message.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@router.callback_query(st.ChangRatio.start, F.data.startswith("change_ratio:"))
async def change_ratio(callback: CallbackQuery, state: FSMContext):
       id_type = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(id_type = id_type)
       await state.set_state(st.ChangRatio.set_new_ratio)
       await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {id_type}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.")

@router.message(st.ChangRatio.set_new_ratio)
async def new_ratio(message: Message, state:FSMContext):
       value = message.text
       data = await state.get_data()
       try:
              ratio = float(value)
              await rq.update_ratio(id=data["id_type"], ratio=ratio)
              await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
              await state.clear()
       except ValueError:
              await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
       except Exception as e:
              await message.answer(f"–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter

from aiogram.fsm.context import FSMContext
import app.validators as valid
import app.keyboards as kb
import app.database.requests as rq

from datetime import datetime, timedelta
import app.utils.states as st

router = Router()

# region —ç–∫—Å–ø–æ—Ä—Ç
@router.message(Command('export'))
async def cmd_export(message: Message, state: FSMContext):
       await state.clear()
       role = await rq.get_user_role(tg_id=message.from_user.id)
       if (role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
              await message.answer("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.exportchoice)
              await state.set_state(st.ExportOrder.choise)
       else:
              await message.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@router.callback_query(st.ExportOrder.choise, F.data.startswith("export:"))
async def exp_type_choise(callback: CallbackQuery, state: FSMContext):
       exp_type = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(expType = exp_type)
       await callback.message.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb.exp_orders_kb)

@router.message(st.ExportOrder.choise, F.text.lower().in_(["–¥–µ–Ω—å ‚òÄÔ∏è", "–Ω–µ–¥–µ–ª—è üìÖ", "–º–µ—Å—è—Ü üåô", "–≥–æ–¥ üóìÔ∏è", "—Å–≤–æ–π"]))
async def status_order_catalog(message: Message, state:FSMContext):
       per = message.text.lower()
       match per:
              case "–¥–µ–Ω—å ‚òÄÔ∏è":
                     date_from = datetime.now().replace(hour=0, minute=0, second=0)
              case "–Ω–µ–¥–µ–ª—è üìÖ":
                     date_from = datetime.now() - timedelta(days=7)
              case "–º–µ—Å—è—Ü üåô":
                     date_from = datetime.now() - timedelta(days=30)
              case "–≥–æ–¥ üóìÔ∏è":
                     date_from = datetime.now() - timedelta(days=365)
              case "—Å–≤–æ–π ‚úèÔ∏è":
                     await state.set_state(st.ExportOrder.period_set)
                     await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
                     return
              case _:
                     await message.answer("–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                     return
       
       await make_export(message, state, date_from)
       

@router.message(st.ExportOrder.period_set)
async def status_order_catalog(message: Message, state:FSMContext):
       if valid.valid_exp_period (message.text):
              date_from, date_to = message.text.split('-')
              await state.set_state(st.ExportOrder.start)
              await make_export(message, state, date_from, date_to)
       else:
              await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑")


async def make_export(message: Message, state:FSMContext, date_from, date_to = None):
       data = await state.get_data()
       if type(date_from) != datetime:
              date_from = datetime.strptime(date_from, '%d.%m.%Y')

       if date_to != None:
              date_to = datetime.strptime(date_to, '%d.%m.%Y')
       else:
             date_to = datetime.today()
       try:
              if data["expType"] == "orders":
                     file = await rq.export_orders_to_excel(date_from=date_from, date_to=date_to)
                     await message.answer_document(file, caption="–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤", reply_markup=ReplyKeyboardRemove())
              if data["expType"] == "drivers":
                     diogram = await rq.export_diagrama(date_from=date_from, date_to=date_to)
                     await message.answer_photo(diogram, caption="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π", reply_markup=ReplyKeyboardRemove())
       except Exception as e:
              if str(e) == "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥":             
                     await message.answer(f"–í –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
              else:
                     await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
#endregion

@router.message(Command('coefficients'))
async def show_ratio(message: Message, state: FSMContext):
       role = await rq.get_user_role(tg_id=message.from_user.id)
       if role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
              await state.set_state(st.ChangRatio.choose_type)
              await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=kb.ratio_type_keyboard())
       else:
              await message.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@router.callback_query(st.ChangRatio.choose_type, F.data.startswith("ratio_type:"))
async def select_ratio_type(callback: CallbackQuery, state: FSMContext):
       _, ratio_type = callback.data.split(":")
       await callback.answer()
       await state.update_data(ratio_type=ratio_type)

       if ratio_type == "cargo":
              items = await rq.get_cargo_type_list()
              await state.set_state(st.ChangRatio.select_cargo_type)
              await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:", reply_markup=kb.generic_coeff_keyboard(items, "cargo"))
       elif ratio_type == "time":
              items = await rq.get_time_coeffs()
              await state.set_state(st.ChangRatio.select_time)
              await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=kb.generic_coeff_keyboard(items, "time"))
       elif ratio_type == "weight":
              items = await rq.get_weight_coeffs()
              await state.set_state(st.ChangRatio.select_weight)
              await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞:", reply_markup=kb.generic_coeff_keyboard(items, "weight"))

@router.callback_query(st.ChangRatio.select_cargo_type, F.data.startswith("change_ratio:"))
async def change_ratio(callback: CallbackQuery, state: FSMContext):
       id_type = callback.data.split(':')[1]
       await callback.answer()
       await state.update_data(id_type = id_type)
       await state.set_state(st.ChangRatio.set_new_ratio)
       await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {id_type}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.")

@router.callback_query(StateFilter(st.ChangRatio.select_cargo_type,
                                   st.ChangRatio.select_time,
                                   st.ChangRatio.select_weight ) , F.data.startswith("change_coeff:"))
async def change_any_ratio(callback: CallbackQuery, state: FSMContext):
       _, prefix, item_id = callback.data.split(":")
       await callback.answer()
       await state.update_data(coeff_id=item_id, coeff_type=prefix)
       await state.set_state(st.ChangRatio.set_generic_ratio)
       await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:")

@router.callback_query(StateFilter(st.ChangRatio.select_cargo_type,
                                   st.ChangRatio.select_time,
                                   st.ChangRatio.select_weight ) , F.data.startswith("add_coeff:"))
async def add_any_ratio(callback: CallbackQuery, state: FSMContext):
       _, prefix = callback.data.split(":")
       await callback.answer()
       await state.update_data(coeff_type=prefix)
       await state.set_state(st.ChangRatio.set_group_ratio)
       match prefix:
              case "cargo":
                     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –≥—Ä—É–∑–∞ (—Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞):")
              case "time":
                     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
              case "weight":
                     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


@router.message(st.ChangRatio.set_group_ratio)
async def set_new_generic_ratio(message: Message, state: FSMContext):
       data = await state.get_data()
       coeff_type = data['coeff_type']
       user_input = message.text.strip()

       match coeff_type:
              case "cargo":
                     if not user_input.isalpha():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —á–∏—Å–µ–ª.")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=user_input)
                     await message.answer(f"–ì—Ä—É–∑–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ '{user_input}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
              
              case "time":
                     if not user_input.isdigit():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã).")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=int(user_input))
                     await message.answer(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç '{user_input} –º–∏–Ω' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
              
              case "weight":
                     if not user_input.isdigit():
                            await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–≤ –∫–≥).")
                            return
                     await rq.add_ratio(coeff_type=coeff_type, value=int(user_input))
                     await message.answer(f"–í–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç '{user_input} –∫–≥' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
       
       await state.clear()

@router.message(st.ChangRatio.set_generic_ratio)
async def set_new_generic_ratio(message: Message, state: FSMContext):
       try:
              value = float(message.text)
              data = await state.get_data()
              coeff_type = data['coeff_type']
              coeff_id = int(data['coeff_id'])

              match coeff_type:
                     case "cargo":
                            await rq.update_ratio(coeff_id, value)
                     case "time":
                            await rq.update_time_coeff(coeff_id, value)
                     case "weight":
                            await rq.update_weight_coeff(coeff_id, value)

              await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
              await state.clear()
       except ValueError:
              await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
       except Exception as e:
              await message.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")